/*
* generated by Xtext
*/
package net.immute.ccs.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import net.immute.ccs.services.CcsEclipseGrammarAccess;

public class CcsEclipseParser extends AbstractContentAssistParser {
	
	@Inject
	private CcsEclipseGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected net.immute.ccs.ui.contentassist.antlr.internal.InternalCcsEclipseParser createParser() {
		net.immute.ccs.ui.contentassist.antlr.internal.InternalCcsEclipseParser result = new net.immute.ccs.ui.contentassist.antlr.internal.InternalCcsEclipseParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStepAccess().getAlternatives(), "rule__Step__Alternatives");
					put(grammarAccess.getRuleAccess().getAlternatives_0(), "rule__Rule__Alternatives_0");
					put(grammarAccess.getNestedAccess().getAlternatives_1(), "rule__Nested__Alternatives_1");
					put(grammarAccess.getNestedAccess().getAlternatives_1_0_1(), "rule__Nested__Alternatives_1_0_1");
					put(grammarAccess.getBoolAccess().getAlternatives(), "rule__Bool__Alternatives");
					put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
					put(grammarAccess.getIdentAccess().getAlternatives(), "rule__Ident__Alternatives");
					put(grammarAccess.getRuleSetAccess().getGroup(), "rule__RuleSet__Group__0");
					put(grammarAccess.getContextAccess().getGroup(), "rule__Context__Group__0");
					put(grammarAccess.getSelectorAccess().getGroup(), "rule__Selector__Group__0");
					put(grammarAccess.getSumAccess().getGroup(), "rule__Sum__Group__0");
					put(grammarAccess.getSumAccess().getGroup_1(), "rule__Sum__Group_1__0");
					put(grammarAccess.getTermAccess().getGroup(), "rule__Term__Group__0");
					put(grammarAccess.getTermAccess().getGroup_1(), "rule__Term__Group_1__0");
					put(grammarAccess.getStepAccess().getGroup_1(), "rule__Step__Group_1__0");
					put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
					put(grammarAccess.getNestedAccess().getGroup(), "rule__Nested__Group__0");
					put(grammarAccess.getNestedAccess().getGroup_1_0(), "rule__Nested__Group_1_0__0");
					put(grammarAccess.getNestedAccess().getGroup_1_1(), "rule__Nested__Group_1_1__0");
					put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
					put(grammarAccess.getConstraintAccess().getGroup(), "rule__Constraint__Group__0");
					put(grammarAccess.getSingleStepAccess().getGroup(), "rule__SingleStep__Group__0");
					put(grammarAccess.getValsAccess().getGroup(), "rule__Vals__Group__0");
					put(grammarAccess.getStepSuffixAccess().getGroup(), "rule__StepSuffix__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getRuleSetAccess().getContextAssignment_0(), "rule__RuleSet__ContextAssignment_0");
					put(grammarAccess.getRuleSetAccess().getRulesAssignment_1(), "rule__RuleSet__RulesAssignment_1");
					put(grammarAccess.getContextAccess().getSelectorAssignment_2(), "rule__Context__SelectorAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			net.immute.ccs.ui.contentassist.antlr.internal.InternalCcsEclipseParser typedParser = (net.immute.ccs.ui.contentassist.antlr.internal.InternalCcsEclipseParser) parser;
			typedParser.entryRuleRuleSet();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public CcsEclipseGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(CcsEclipseGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}

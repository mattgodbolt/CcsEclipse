/*
* generated by Xtext
*/
grammar InternalCcsEclipse;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package net.immute.ccs.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package net.immute.ccs.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import net.immute.ccs.services.CcsEclipseGrammarAccess;

}

@parser::members {
 
 	private CcsEclipseGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(CcsEclipseGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleRuleSet
entryRuleRuleSet 
:
{ before(grammarAccess.getRuleSetRule()); }
	 ruleRuleSet
{ after(grammarAccess.getRuleSetRule()); } 
	 EOF 
;

// Rule RuleSet
ruleRuleSet
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleSetAccess().getGroup()); }
(rule__RuleSet__Group__0)
{ after(grammarAccess.getRuleSetAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContext
entryRuleContext 
:
{ before(grammarAccess.getContextRule()); }
	 ruleContext
{ after(grammarAccess.getContextRule()); } 
	 EOF 
;

// Rule Context
ruleContext
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getContextAccess().getGroup()); }
(rule__Context__Group__0)
{ after(grammarAccess.getContextAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelector
entryRuleSelector 
:
{ before(grammarAccess.getSelectorRule()); }
	 ruleSelector
{ after(grammarAccess.getSelectorRule()); } 
	 EOF 
;

// Rule Selector
ruleSelector
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelectorAccess().getGroup()); }
(rule__Selector__Group__0)
{ after(grammarAccess.getSelectorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSum
entryRuleSum 
:
{ before(grammarAccess.getSumRule()); }
	 ruleSum
{ after(grammarAccess.getSumRule()); } 
	 EOF 
;

// Rule Sum
ruleSum
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSumAccess().getGroup()); }
(rule__Sum__Group__0)
{ after(grammarAccess.getSumAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProduct
entryRuleProduct 
:
{ before(grammarAccess.getProductRule()); }
	 ruleProduct
{ after(grammarAccess.getProductRule()); } 
	 EOF 
;

// Rule Product
ruleProduct
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getProductAccess().getTermParserRuleCall()); }
(	ruleTerm)
{ after(grammarAccess.getProductAccess().getTermParserRuleCall()); }
)
(
{ before(grammarAccess.getProductAccess().getTermParserRuleCall()); }
(	ruleTerm)*
{ after(grammarAccess.getProductAccess().getTermParserRuleCall()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerm
entryRuleTerm 
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule Term
ruleTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTermAccess().getGroup()); }
(rule__Term__Group__0)
{ after(grammarAccess.getTermAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStep
entryRuleStep 
:
{ before(grammarAccess.getStepRule()); }
	 ruleStep
{ after(grammarAccess.getStepRule()); } 
	 EOF 
;

// Rule Step
ruleStep
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStepAccess().getAlternatives()); }
(rule__Step__Alternatives)
{ after(grammarAccess.getStepAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRule
entryRuleRule 
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleAccess().getGroup()); }
(rule__Rule__Group__0)
{ after(grammarAccess.getRuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNested
entryRuleNested 
:
{ before(grammarAccess.getNestedRule()); }
	 ruleNested
{ after(grammarAccess.getNestedRule()); } 
	 EOF 
;

// Rule Nested
ruleNested
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNestedAccess().getGroup()); }
(rule__Nested__Group__0)
{ after(grammarAccess.getNestedAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleModifier
entryRuleModifier 
:
{ before(grammarAccess.getModifierRule()); }
	 ruleModifier
{ after(grammarAccess.getModifierRule()); } 
	 EOF 
;

// Rule Modifier
ruleModifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModifierAccess().getOverrideKeyword()); }
(
	'@override' 
)?
{ after(grammarAccess.getModifierAccess().getOverrideKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProperty
entryRuleProperty 
:
{ before(grammarAccess.getPropertyRule()); }
	 ruleProperty
{ after(grammarAccess.getPropertyRule()); } 
	 EOF 
;

// Rule Property
ruleProperty
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertyAccess().getGroup()); }
(rule__Property__Group__0)
{ after(grammarAccess.getPropertyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulebool
entryRulebool 
:
{ before(grammarAccess.getBoolRule()); }
	 rulebool
{ after(grammarAccess.getBoolRule()); } 
	 EOF 
;

// Rule bool
rulebool
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoolAccess().getAlternatives()); }
(rule__Bool__Alternatives)
{ after(grammarAccess.getBoolAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValue
entryRuleValue 
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueAccess().getAlternatives()); }
(rule__Value__Alternatives)
{ after(grammarAccess.getValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstraint
entryRuleConstraint 
:
{ before(grammarAccess.getConstraintRule()); }
	 ruleConstraint
{ after(grammarAccess.getConstraintRule()); } 
	 EOF 
;

// Rule Constraint
ruleConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstraintAccess().getGroup()); }
(rule__Constraint__Group__0)
{ after(grammarAccess.getConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSingleStep
entryRuleSingleStep 
:
{ before(grammarAccess.getSingleStepRule()); }
	 ruleSingleStep
{ after(grammarAccess.getSingleStepRule()); } 
	 EOF 
;

// Rule SingleStep
ruleSingleStep
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSingleStepAccess().getGroup()); }
(rule__SingleStep__Group__0)
{ after(grammarAccess.getSingleStepAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIdent
entryRuleIdent 
:
{ before(grammarAccess.getIdentRule()); }
	 ruleIdent
{ after(grammarAccess.getIdentRule()); } 
	 EOF 
;

// Rule Ident
ruleIdent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIdentAccess().getAlternatives()); }
(rule__Ident__Alternatives)
{ after(grammarAccess.getIdentAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVals
entryRuleVals 
:
{ before(grammarAccess.getValsRule()); }
	 ruleVals
{ after(grammarAccess.getValsRule()); } 
	 EOF 
;

// Rule Vals
ruleVals
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValsAccess().getGroup()); }
(rule__Vals__Group__0)
{ after(grammarAccess.getValsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStepSuffix
entryRuleStepSuffix 
:
{ before(grammarAccess.getStepSuffixRule()); }
	 ruleStepSuffix
{ after(grammarAccess.getStepSuffixRule()); } 
	 EOF 
;

// Rule StepSuffix
ruleStepSuffix
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStepSuffixAccess().getGroup()); }
(rule__StepSuffix__Group__0)
{ after(grammarAccess.getStepSuffixAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Step__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getSingleStepParserRuleCall_0()); }
	ruleSingleStep
{ after(grammarAccess.getStepAccess().getSingleStepParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStepAccess().getGroup_1()); }
(rule__Step__Group_1__0)
{ after(grammarAccess.getStepAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getImportParserRuleCall_0_0()); }
	ruleImport
{ after(grammarAccess.getRuleAccess().getImportParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getRuleAccess().getConstraintParserRuleCall_0_1()); }
	ruleConstraint
{ after(grammarAccess.getRuleAccess().getConstraintParserRuleCall_0_1()); }
)

    |(
{ before(grammarAccess.getRuleAccess().getPropertyParserRuleCall_0_2()); }
	ruleProperty
{ after(grammarAccess.getRuleAccess().getPropertyParserRuleCall_0_2()); }
)

    |(
{ before(grammarAccess.getRuleAccess().getNestedParserRuleCall_0_3()); }
	ruleNested
{ after(grammarAccess.getRuleAccess().getNestedParserRuleCall_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Nested__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNestedAccess().getGroup_1_0()); }
(rule__Nested__Group_1_0__0)
{ after(grammarAccess.getNestedAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getNestedAccess().getGroup_1_1()); }
(rule__Nested__Group_1_1__0)
{ after(grammarAccess.getNestedAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Nested__Alternatives_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNestedAccess().getImportParserRuleCall_1_0_1_0()); }
	ruleImport
{ after(grammarAccess.getNestedAccess().getImportParserRuleCall_1_0_1_0()); }
)

    |(
{ before(grammarAccess.getNestedAccess().getConstraintParserRuleCall_1_0_1_1()); }
	ruleConstraint
{ after(grammarAccess.getNestedAccess().getConstraintParserRuleCall_1_0_1_1()); }
)

    |(
{ before(grammarAccess.getNestedAccess().getPropertyParserRuleCall_1_0_1_2()); }
	ruleProperty
{ after(grammarAccess.getNestedAccess().getPropertyParserRuleCall_1_0_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAccess().getTrueKeyword_0()); }

	'true' 

{ after(grammarAccess.getBoolAccess().getTrueKeyword_0()); }
)

    |(
{ before(grammarAccess.getBoolAccess().getFalseKeyword_1()); }

	'false' 

{ after(grammarAccess.getBoolAccess().getFalseKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getHEXINTTerminalRuleCall_0()); }
	RULE_HEXINT
{ after(grammarAccess.getValueAccess().getHEXINTTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getValueAccess().getNUMBERTerminalRuleCall_1()); }
	RULE_NUMBER
{ after(grammarAccess.getValueAccess().getNUMBERTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getValueAccess().getSTRINGTerminalRuleCall_2()); }
	RULE_STRING
{ after(grammarAccess.getValueAccess().getSTRINGTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getValueAccess().getBoolParserRuleCall_3()); }
	rulebool
{ after(grammarAccess.getValueAccess().getBoolParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Ident__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getIdentAccess().getIDTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getIdentAccess().getSTRINGTerminalRuleCall_1()); }
	RULE_STRING
{ after(grammarAccess.getIdentAccess().getSTRINGTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__RuleSet__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleSet__Group__0__Impl
	rule__RuleSet__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleSet__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleSetAccess().getContextAssignment_0()); }
(rule__RuleSet__ContextAssignment_0)?
{ after(grammarAccess.getRuleSetAccess().getContextAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleSet__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleSet__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleSet__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleSetAccess().getRulesAssignment_1()); }
(rule__RuleSet__RulesAssignment_1)*
{ after(grammarAccess.getRuleSetAccess().getRulesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Context__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Context__Group__0__Impl
	rule__Context__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Context__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextAccess().getContextKeyword_0()); }

	'@context' 

{ after(grammarAccess.getContextAccess().getContextKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Context__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Context__Group__1__Impl
	rule__Context__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Context__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getContextAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Context__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Context__Group__2__Impl
	rule__Context__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Context__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextAccess().getSelectorAssignment_2()); }
(rule__Context__SelectorAssignment_2)
{ after(grammarAccess.getContextAccess().getSelectorAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Context__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Context__Group__3__Impl
	rule__Context__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Context__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getContextAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Context__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Context__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Context__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextAccess().getSemicolonKeyword_4()); }
(
	';' 
)?
{ after(grammarAccess.getContextAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Selector__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selector__Group__0__Impl
	rule__Selector__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorAccess().getSumParserRuleCall_0()); }
	ruleSum
{ after(grammarAccess.getSelectorAccess().getSumParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Selector__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selector__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Selector__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectorAccess().getGreaterThanSignKeyword_1()); }
(
	'>' 
)?
{ after(grammarAccess.getSelectorAccess().getGreaterThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Sum__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sum__Group__0__Impl
	rule__Sum__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumAccess().getProductParserRuleCall_0()); }
	ruleProduct
{ after(grammarAccess.getSumAccess().getProductParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sum__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sum__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumAccess().getGroup_1()); }
(rule__Sum__Group_1__0)*
{ after(grammarAccess.getSumAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Sum__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sum__Group_1__0__Impl
	rule__Sum__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getSumAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sum__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sum__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sum__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSumAccess().getProductParserRuleCall_1_1()); }
	ruleProduct
{ after(grammarAccess.getSumAccess().getProductParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Term__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__0__Impl
	rule__Term__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getStepParserRuleCall_0()); }
	ruleStep
{ after(grammarAccess.getTermAccess().getStepParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getGroup_1()); }
(rule__Term__Group_1__0)*
{ after(grammarAccess.getTermAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Term__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1__0__Impl
	rule__Term__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getGreaterThanSignKeyword_1_0()); }

	'>' 

{ after(grammarAccess.getTermAccess().getGreaterThanSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getStepParserRuleCall_1_1()); }
	ruleStep
{ after(grammarAccess.getTermAccess().getStepParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Step__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Step__Group_1__0__Impl
	rule__Step__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getStepAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Step__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Step__Group_1__1__Impl
	rule__Step__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getSumParserRuleCall_1_1()); }
	ruleSum
{ after(grammarAccess.getStepAccess().getSumParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Step__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Step__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getStepAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Rule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getAlternatives_0()); }
(rule__Rule__Alternatives_0)
{ after(grammarAccess.getRuleAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getSemicolonKeyword_1()); }
(
	';' 
)?
{ after(grammarAccess.getRuleAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Nested__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Nested__Group__0__Impl
	rule__Nested__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Nested__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNestedAccess().getSelectorParserRuleCall_0()); }
	ruleSelector
{ after(grammarAccess.getNestedAccess().getSelectorParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Nested__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Nested__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Nested__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNestedAccess().getAlternatives_1()); }
(rule__Nested__Alternatives_1)
{ after(grammarAccess.getNestedAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Nested__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Nested__Group_1_0__0__Impl
	rule__Nested__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Nested__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNestedAccess().getColonKeyword_1_0_0()); }

	':' 

{ after(grammarAccess.getNestedAccess().getColonKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Nested__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Nested__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Nested__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNestedAccess().getAlternatives_1_0_1()); }
(rule__Nested__Alternatives_1_0_1)
{ after(grammarAccess.getNestedAccess().getAlternatives_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Nested__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Nested__Group_1_1__0__Impl
	rule__Nested__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Nested__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNestedAccess().getLeftCurlyBracketKeyword_1_1_0()); }

	'{' 

{ after(grammarAccess.getNestedAccess().getLeftCurlyBracketKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Nested__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Nested__Group_1_1__1__Impl
	rule__Nested__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Nested__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNestedAccess().getRuleParserRuleCall_1_1_1()); }
(	ruleRule)*
{ after(grammarAccess.getNestedAccess().getRuleParserRuleCall_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Nested__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Nested__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Nested__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNestedAccess().getRightCurlyBracketKeyword_1_1_2()); }

	'}' 

{ after(grammarAccess.getNestedAccess().getRightCurlyBracketKeyword_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Property__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Property__Group__0__Impl
	rule__Property__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getModifierParserRuleCall_0()); }
	ruleModifier
{ after(grammarAccess.getPropertyAccess().getModifierParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Property__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Property__Group__1__Impl
	rule__Property__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getPropertyAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Property__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Property__Group__2__Impl
	rule__Property__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getPropertyAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Property__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Property__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getValueParserRuleCall_3()); }
	ruleValue
{ after(grammarAccess.getPropertyAccess().getValueParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Constraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group__0__Impl
	rule__Constraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getConstrainKeyword_0()); }

	'@constrain' 

{ after(grammarAccess.getConstraintAccess().getConstrainKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constraint__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstraintAccess().getSingleStepParserRuleCall_1()); }
	ruleSingleStep
{ after(grammarAccess.getConstraintAccess().getSingleStepParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SingleStep__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleStep__Group__0__Impl
	rule__SingleStep__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleStep__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleStepAccess().getIdentParserRuleCall_0()); }
	ruleIdent
{ after(grammarAccess.getSingleStepAccess().getIdentParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingleStep__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleStep__Group__1__Impl
	rule__SingleStep__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleStep__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleStepAccess().getValsParserRuleCall_1()); }
(	ruleVals)?
{ after(grammarAccess.getSingleStepAccess().getValsParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingleStep__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingleStep__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleStep__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleStepAccess().getStepSuffixParserRuleCall_2()); }
(	ruleStepSuffix)?
{ after(grammarAccess.getSingleStepAccess().getStepSuffixParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Vals__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vals__Group__0__Impl
	rule__Vals__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vals__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValsAccess().getFullStopKeyword_0()); }

	'.' 

{ after(grammarAccess.getValsAccess().getFullStopKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vals__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vals__Group__1__Impl
	rule__Vals__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Vals__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValsAccess().getIdentParserRuleCall_1()); }
	ruleIdent
{ after(grammarAccess.getValsAccess().getIdentParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vals__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vals__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vals__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValsAccess().getValsParserRuleCall_2()); }
(	ruleVals)*
{ after(grammarAccess.getValsAccess().getValsParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__StepSuffix__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StepSuffix__Group__0__Impl
	rule__StepSuffix__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StepSuffix__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepSuffixAccess().getSolidusKeyword_0()); }

	'/' 

{ after(grammarAccess.getStepSuffixAccess().getSolidusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StepSuffix__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StepSuffix__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StepSuffix__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStepSuffixAccess().getSingleStepParserRuleCall_1()); }
	ruleSingleStep
{ after(grammarAccess.getStepSuffixAccess().getSingleStepParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }

	'@import' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getSTRINGTerminalRuleCall_1()); }
	RULE_STRING
{ after(grammarAccess.getImportAccess().getSTRINGTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__RuleSet__ContextAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleSetAccess().getContextContextParserRuleCall_0_0()); }
	ruleContext{ after(grammarAccess.getRuleSetAccess().getContextContextParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleSet__RulesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleSetAccess().getRulesRuleParserRuleCall_1_0()); }
	ruleRule{ after(grammarAccess.getRuleSetAccess().getRulesRuleParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Context__SelectorAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextAccess().getSelectorSelectorParserRuleCall_2_0()); }
	ruleSelector{ after(grammarAccess.getContextAccess().getSelectorSelectorParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_HEXINT : '0x' ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_NUMBER : (('0'..'9')+ ('.' ('0'..'9')*)?|'.' ('0'..'9')+) (('e'|'E') ('+'|'-')? ('0'..'9')+)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



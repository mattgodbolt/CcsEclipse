/*
* generated by Xtext
*/
grammar InternalCcsEclipse;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package net.immute.ccs.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package net.immute.ccs.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import net.immute.ccs.services.CcsEclipseGrammarAccess;

}

@parser::members {

 	private CcsEclipseGrammarAccess grammarAccess;
 	
    public InternalCcsEclipseParser(TokenStream input, CcsEclipseGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "RuleSet";	
   	}
   	
   	@Override
   	protected CcsEclipseGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleRuleSet
entryRuleRuleSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleSetRule()); }
	 iv_ruleRuleSet=ruleRuleSet 
	 { $current=$iv_ruleRuleSet.current; } 
	 EOF 
;

// Rule RuleSet
ruleRuleSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRuleSetAccess().getContextContextParserRuleCall_0_0()); 
	    }
		lv_context_0_0=ruleContext		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleSetRule());
	        }
       		set(
       			$current, 
       			"context",
        		lv_context_0_0, 
        		"Context");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleSetAccess().getRulesRuleParserRuleCall_1_0()); 
	    }
		lv_rules_1_0=ruleRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleSetRule());
	        }
       		add(
       			$current, 
       			"rules",
        		lv_rules_1_0, 
        		"Rule");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleContext
entryRuleContext returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContextRule()); }
	 iv_ruleContext=ruleContext 
	 { $current=$iv_ruleContext.current; } 
	 EOF 
;

// Rule Context
ruleContext returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@context' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getContextAccess().getContextKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getContextAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContextAccess().getSelectorSelectorParserRuleCall_2_0()); 
	    }
		lv_selector_2_0=ruleSelector		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContextRule());
	        }
       		set(
       			$current, 
       			"selector",
        		lv_selector_2_0, 
        		"Selector");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getContextAccess().getRightParenthesisKeyword_3());
    }
(	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getContextAccess().getSemicolonKeyword_4());
    }
)?)
;





// Entry rule entryRuleSelector
entryRuleSelector returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectorRule()); }
	 iv_ruleSelector=ruleSelector 
	 { $current=$iv_ruleSelector.current; } 
	 EOF 
;

// Rule Selector
ruleSelector returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSelectorAccess().getSumSumParserRuleCall_0_0()); 
	    }
		lv_sum_0_0=ruleSum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelectorRule());
	        }
       		set(
       			$current, 
       			"sum",
        		lv_sum_0_0, 
        		"Sum");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='>' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSelectorAccess().getGreaterThanSignKeyword_1());
    }
)?)
;





// Entry rule entryRuleSum
entryRuleSum returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSumRule()); } 
	 iv_ruleSum=ruleSum 
	 { $current=$iv_ruleSum.current.getText(); }  
	 EOF 
;

// Rule Sum
ruleSum returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSumAccess().getProductParserRuleCall_0()); 
    }
    this_Product_0=ruleProduct    {
		$current.merge(this_Product_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSumAccess().getCommaKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getSumAccess().getProductParserRuleCall_1_1()); 
    }
    this_Product_2=ruleProduct    {
		$current.merge(this_Product_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleProduct
entryRuleProduct returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getProductRule()); } 
	 iv_ruleProduct=ruleProduct 
	 { $current=$iv_ruleProduct.current.getText(); }  
	 EOF 
;

// Rule Product
ruleProduct returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getProductAccess().getTermParserRuleCall()); 
    }
    this_Term_0=ruleTerm    {
		$current.merge(this_Term_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+
    ;





// Entry rule entryRuleTerm
entryRuleTerm returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermRule()); } 
	 iv_ruleTerm=ruleTerm 
	 { $current=$iv_ruleTerm.current.getText(); }  
	 EOF 
;

// Rule Term
ruleTerm returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTermAccess().getStepParserRuleCall_0()); 
    }
    this_Step_0=ruleStep    {
		$current.merge(this_Step_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTermAccess().getGreaterThanSignKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getTermAccess().getStepParserRuleCall_1_1()); 
    }
    this_Step_2=ruleStep    {
		$current.merge(this_Step_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleStep
entryRuleStep returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStepRule()); } 
	 iv_ruleStep=ruleStep 
	 { $current=$iv_ruleStep.current.getText(); }  
	 EOF 
;

// Rule Step
ruleStep returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStepAccess().getSingleStepParserRuleCall_0()); 
    }
    this_SingleStep_0=ruleSingleStep    {
		$current.merge(this_SingleStep_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStepAccess().getLeftParenthesisKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getStepAccess().getSumParserRuleCall_1_1()); 
    }
    this_Sum_2=ruleSum    {
		$current.merge(this_Sum_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStepAccess().getRightParenthesisKeyword_1_2()); 
    }
))
    ;





// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	 iv_ruleRule=ruleRule 
	 { $current=$iv_ruleRule.current; } 
	 EOF 
;

// Rule Rule
ruleRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getImportImportParserRuleCall_0_0_0()); 
	    }
		lv_import_0_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		set(
       			$current, 
       			"import",
        		lv_import_0_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getConstraintConstraintParserRuleCall_0_1_0()); 
	    }
		lv_constraint_1_0=ruleConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_1_0, 
        		"Constraint");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getPropertyPropertyParserRuleCall_0_2_0()); 
	    }
		lv_property_2_0=ruleProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		set(
       			$current, 
       			"property",
        		lv_property_2_0, 
        		"Property");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getNestedNestedParserRuleCall_0_3_0()); 
	    }
		lv_nested_3_0=ruleNested		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		set(
       			$current, 
       			"nested",
        		lv_nested_3_0, 
        		"Nested");
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRuleAccess().getSemicolonKeyword_1());
    }
)?)
;





// Entry rule entryRuleNested
entryRuleNested returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNestedRule()); }
	 iv_ruleNested=ruleNested 
	 { $current=$iv_ruleNested.current; } 
	 EOF 
;

// Rule Nested
ruleNested returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNestedAccess().getSelectorSelectorParserRuleCall_0_0()); 
	    }
		lv_selector_0_0=ruleSelector		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNestedRule());
	        }
       		set(
       			$current, 
       			"selector",
        		lv_selector_0_0, 
        		"Selector");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNestedAccess().getColonKeyword_1_0_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getNestedAccess().getImportImportParserRuleCall_1_0_1_0_0()); 
	    }
		lv_import_2_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNestedRule());
	        }
       		set(
       			$current, 
       			"import",
        		lv_import_2_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getNestedAccess().getConstraintConstraintParserRuleCall_1_0_1_1_0()); 
	    }
		lv_constraint_3_0=ruleConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNestedRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_3_0, 
        		"Constraint");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getNestedAccess().getPropertyPropertyParserRuleCall_1_0_1_2_0()); 
	    }
		lv_property_4_0=ruleProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNestedRule());
	        }
       		set(
       			$current, 
       			"property",
        		lv_property_4_0, 
        		"Property");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |(	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNestedAccess().getLeftCurlyBracketKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNestedAccess().getRulesRuleParserRuleCall_1_1_1_0()); 
	    }
		lv_rules_6_0=ruleRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNestedRule());
	        }
       		add(
       			$current, 
       			"rules",
        		lv_rules_6_0, 
        		"Rule");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getNestedAccess().getRightCurlyBracketKeyword_1_1_2());
    }
)))
;





// Entry rule entryRuleModifier
entryRuleModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModifierRule()); }
	 iv_ruleModifier=ruleModifier 
	 { $current=$iv_ruleModifier.current; } 
	 EOF 
;

// Rule Modifier
ruleModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_override_0_0=	'@override' 
    {
        newLeafNode(lv_override_0_0, grammarAccess.getModifierAccess().getOverrideOverrideKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModifierRule());
	        }
       		setWithLastConsumed($current, "override", true, "@override");
	    }

)
)
;





// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	 iv_ruleProperty=ruleProperty 
	 { $current=$iv_ruleProperty.current; } 
	 EOF 
;

// Rule Property
ruleProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getModifiersModifierParserRuleCall_0_0()); 
	    }
		lv_modifiers_0_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		add(
       			$current, 
       			"modifiers",
        		lv_modifiers_0_0, 
        		"Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPropertyAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getValueValueParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBoolean
entryRuleBoolean returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanRule()); } 
	 iv_ruleBoolean=ruleBoolean 
	 { $current=$iv_ruleBoolean.current.getText(); }  
	 EOF 
;

// Rule Boolean
ruleBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanAccess().getTrueKeyword_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBooleanAccess().getFalseKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleValue
entryRuleValue returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); } 
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current.getText(); }  
	 EOF 
;

// Rule Value
ruleValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_HEXINT_0=RULE_HEXINT    {
		$current.merge(this_HEXINT_0);
    }

    { 
    newLeafNode(this_HEXINT_0, grammarAccess.getValueAccess().getHEXINTTerminalRuleCall_0()); 
    }

    |    this_NUMBER_1=RULE_NUMBER    {
		$current.merge(this_NUMBER_1);
    }

    { 
    newLeafNode(this_NUMBER_1, grammarAccess.getValueAccess().getNUMBERTerminalRuleCall_1()); 
    }

    |    this_STRING_2=RULE_STRING    {
		$current.merge(this_STRING_2);
    }

    { 
    newLeafNode(this_STRING_2, grammarAccess.getValueAccess().getSTRINGTerminalRuleCall_2()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getBooleanParserRuleCall_3()); 
    }
    this_Boolean_3=ruleBoolean    {
		$current.merge(this_Boolean_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleConstraint
entryRuleConstraint returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraintRule()); } 
	 iv_ruleConstraint=ruleConstraint 
	 { $current=$iv_ruleConstraint.current.getText(); }  
	 EOF 
;

// Rule Constraint
ruleConstraint returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='@constrain' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstraintAccess().getConstrainKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getConstraintAccess().getSingleStepParserRuleCall_1()); 
    }
    this_SingleStep_1=ruleSingleStep    {
		$current.merge(this_SingleStep_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleSingleStep
entryRuleSingleStep returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSingleStepRule()); } 
	 iv_ruleSingleStep=ruleSingleStep 
	 { $current=$iv_ruleSingleStep.current.getText(); }  
	 EOF 
;

// Rule SingleStep
ruleSingleStep returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSingleStepAccess().getIdentParserRuleCall_0()); 
    }
    this_Ident_0=ruleIdent    {
		$current.merge(this_Ident_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getSingleStepAccess().getValsParserRuleCall_1()); 
    }
    this_Vals_1=ruleVals    {
		$current.merge(this_Vals_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getSingleStepAccess().getStepSuffixParserRuleCall_2()); 
    }
    this_StepSuffix_2=ruleStepSuffix    {
		$current.merge(this_StepSuffix_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleIdent
entryRuleIdent returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentRule()); } 
	 iv_ruleIdent=ruleIdent 
	 { $current=$iv_ruleIdent.current.getText(); }  
	 EOF 
;

// Rule Ident
ruleIdent returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getIdentAccess().getIDTerminalRuleCall_0()); 
    }

    |    this_STRING_1=RULE_STRING    {
		$current.merge(this_STRING_1);
    }

    { 
    newLeafNode(this_STRING_1, grammarAccess.getIdentAccess().getSTRINGTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleVals
entryRuleVals returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValsRule()); } 
	 iv_ruleVals=ruleVals 
	 { $current=$iv_ruleVals.current.getText(); }  
	 EOF 
;

// Rule Vals
ruleVals returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getValsAccess().getFullStopKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getValsAccess().getIdentParserRuleCall_1()); 
    }
    this_Ident_1=ruleIdent    {
		$current.merge(this_Ident_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getValsAccess().getValsParserRuleCall_2()); 
    }
    this_Vals_2=ruleVals    {
		$current.merge(this_Vals_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleStepSuffix
entryRuleStepSuffix returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStepSuffixRule()); } 
	 iv_ruleStepSuffix=ruleStepSuffix 
	 { $current=$iv_ruleStepSuffix.current.getText(); }  
	 EOF 
;

// Rule StepSuffix
ruleStepSuffix returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStepSuffixAccess().getSolidusKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getStepSuffixAccess().getSingleStepParserRuleCall_1()); 
    }
    this_SingleStep_1=ruleSingleStep    {
		$current.merge(this_SingleStep_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			newLeafNode(lv_importURI_1_0, grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"STRING");
	    }

)
))
;





RULE_HEXINT : '0x' ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_NUMBER : '-'? (('0'..'9')+ ('.' ('0'..'9')*)?|'.' ('0'..'9')+) (('e'|'E') ('+'|'-')? ('0'..'9')+)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



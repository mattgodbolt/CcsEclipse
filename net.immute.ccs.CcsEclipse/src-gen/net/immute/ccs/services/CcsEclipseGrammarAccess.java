/*
* generated by Xtext
*/
package net.immute.ccs.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class CcsEclipseGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RuleSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContextAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContextContextParserRuleCall_0_0 = (RuleCall)cContextAssignment_0.eContents().get(0);
		private final Assignment cRulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_1_0 = (RuleCall)cRulesAssignment_1.eContents().get(0);
		
		//RuleSet:
		//	context=Context? rules+=Rule*;
		public ParserRule getRule() { return rule; }

		//context=Context? rules+=Rule*
		public Group getGroup() { return cGroup; }

		//context=Context?
		public Assignment getContextAssignment_0() { return cContextAssignment_0; }

		//Context
		public RuleCall getContextContextParserRuleCall_0_0() { return cContextContextParserRuleCall_0_0; }

		//rules+=Rule*
		public Assignment getRulesAssignment_1() { return cRulesAssignment_1; }

		//Rule
		public RuleCall getRulesRuleParserRuleCall_1_0() { return cRulesRuleParserRuleCall_1_0; }
	}

	public class ContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Context");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSelectorParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Context:
		//	"@context" "(" Selector ")" ";"?;
		public ParserRule getRule() { return rule; }

		//"@context" "(" Selector ")" ";"?
		public Group getGroup() { return cGroup; }

		//"@context"
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//Selector
		public RuleCall getSelectorParserRuleCall_2() { return cSelectorParserRuleCall_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//";"?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Selector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSumParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cSumParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Selector:
		//	Sum (">" Sum)*;
		public ParserRule getRule() { return rule; }

		//Sum (">" Sum)*
		public Group getGroup() { return cGroup; }

		//Sum
		public RuleCall getSumParserRuleCall_0() { return cSumParserRuleCall_0; }

		//(">" Sum)*
		public Group getGroup_1() { return cGroup_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_0() { return cGreaterThanSignKeyword_1_0; }

		//Sum
		public RuleCall getSumParserRuleCall_1_1() { return cSumParserRuleCall_1_1; }
	}

	public class SumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cProductParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cProductParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Sum:
		//	Product ("," Product)*;
		public ParserRule getRule() { return rule; }

		//Product ("," Product)*
		public Group getGroup() { return cGroup; }

		//Product
		public RuleCall getProductParserRuleCall_0() { return cProductParserRuleCall_0; }

		//("," Product)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//Product
		public RuleCall getProductParserRuleCall_1_1() { return cProductParserRuleCall_1_1; }
	}

	public class ProductElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Product");
		private final RuleCall cTermParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Product:
		//	Term+;
		public ParserRule getRule() { return rule; }

		//Term+
		public RuleCall getTermParserRuleCall() { return cTermParserRuleCall; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStepParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cStepParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Term:
		//	Step (">" Step)*;
		public ParserRule getRule() { return rule; }

		//Step (">" Step)*
		public Group getGroup() { return cGroup; }

		//Step
		public RuleCall getStepParserRuleCall_0() { return cStepParserRuleCall_0; }

		//(">" Step)*
		public Group getGroup_1() { return cGroup_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_0() { return cGreaterThanSignKeyword_1_0; }

		//Step
		public RuleCall getStepParserRuleCall_1_1() { return cStepParserRuleCall_1_1; }
	}

	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Step");
		private final RuleCall cSingleStepParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Step: // | '(' Sum ')'
		//	SingleStep;
		public ParserRule getRule() { return rule; }

		//// | '(' Sum ')'
		//SingleStep
		public RuleCall getSingleStepParserRuleCall() { return cSingleStepParserRuleCall; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstraintParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPropertyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNestedParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Rule:
		//	Import | Constraint | Property | Nested;
		public ParserRule getRule() { return rule; }

		//Import | Constraint | Property | Nested
		public Alternatives getAlternatives() { return cAlternatives; }

		//Import
		public RuleCall getImportParserRuleCall_0() { return cImportParserRuleCall_0; }

		//Constraint
		public RuleCall getConstraintParserRuleCall_1() { return cConstraintParserRuleCall_1; }

		//Property
		public RuleCall getPropertyParserRuleCall_2() { return cPropertyParserRuleCall_2; }

		//Nested
		public RuleCall getNestedParserRuleCall_3() { return cNestedParserRuleCall_3; }
	}

	public class NestedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Nested");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSelectorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cColonKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final RuleCall cImportParserRuleCall_1_0_1_0 = (RuleCall)cAlternatives_1_0_1.eContents().get(0);
		private final RuleCall cConstraintParserRuleCall_1_0_1_1 = (RuleCall)cAlternatives_1_0_1.eContents().get(1);
		private final RuleCall cPropertyParserRuleCall_1_0_1_2 = (RuleCall)cAlternatives_1_0_1.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cRuleParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//Nested:
		//	Selector (":" (Import | Constraint | Property) | "{" Rule* "}");
		public ParserRule getRule() { return rule; }

		//Selector (":" (Import | Constraint | Property) | "{" Rule* "}")
		public Group getGroup() { return cGroup; }

		//Selector
		public RuleCall getSelectorParserRuleCall_0() { return cSelectorParserRuleCall_0; }

		//":" (Import | Constraint | Property) | "{" Rule* "}"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//":" (Import | Constraint | Property)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//":"
		public Keyword getColonKeyword_1_0_0() { return cColonKeyword_1_0_0; }

		//Import | Constraint | Property
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }

		//Import
		public RuleCall getImportParserRuleCall_1_0_1_0() { return cImportParserRuleCall_1_0_1_0; }

		//Constraint
		public RuleCall getConstraintParserRuleCall_1_0_1_1() { return cConstraintParserRuleCall_1_0_1_1; }

		//Property
		public RuleCall getPropertyParserRuleCall_1_0_1_2() { return cPropertyParserRuleCall_1_0_1_2; }

		//"{" Rule* "}"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1_0() { return cLeftCurlyBracketKeyword_1_1_0; }

		//Rule*
		public RuleCall getRuleParserRuleCall_1_1_1() { return cRuleParserRuleCall_1_1_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_1_2() { return cRightCurlyBracketKeyword_1_1_2; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cValueParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Property:
		//	ID "=" Value;
		public ParserRule getRule() { return rule; }

		//ID "=" Value
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//Value
		public RuleCall getValueParserRuleCall_2() { return cValueParserRuleCall_2; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHEXINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Keyword cTrueKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFalseKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Value:
		//	HEXINT | INT | "true" | "false";
		public ParserRule getRule() { return rule; }

		//HEXINT | INT | "true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//HEXINT
		public RuleCall getHEXINTTerminalRuleCall_0() { return cHEXINTTerminalRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//"true"
		public Keyword getTrueKeyword_2() { return cTrueKeyword_2; }

		//"false"
		public Keyword getFalseKeyword_3() { return cFalseKeyword_3; }
	}

	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstrainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSingleStepParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Constraint:
		//	"@constrain" SingleStep;
		public ParserRule getRule() { return rule; }

		//"@constrain" SingleStep
		public Group getGroup() { return cGroup; }

		//"@constrain"
		public Keyword getConstrainKeyword_0() { return cConstrainKeyword_0; }

		//SingleStep
		public RuleCall getSingleStepParserRuleCall_1() { return cSingleStepParserRuleCall_1; }
	}

	public class SingleStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cValsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cStepSuffixParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//SingleStep:
		//	ID Vals? StepSuffix?;
		public ParserRule getRule() { return rule; }

		//ID Vals? StepSuffix?
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//Vals?
		public RuleCall getValsParserRuleCall_1() { return cValsParserRuleCall_1; }

		//StepSuffix?
		public RuleCall getStepSuffixParserRuleCall_2() { return cStepSuffixParserRuleCall_2; }
	}

	public class ValsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Vals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cValsParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Vals:
		//	"." ID Vals*;
		public ParserRule getRule() { return rule; }

		//"." ID Vals*
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//Vals*
		public RuleCall getValsParserRuleCall_2() { return cValsParserRuleCall_2; }
	}

	public class StepSuffixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StepSuffix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSingleStepParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//StepSuffix:
		//	"/" SingleStep;
		public ParserRule getRule() { return rule; }

		//"/" SingleStep
		public Group getGroup() { return cGroup; }

		//"/"
		public Keyword getSolidusKeyword_0() { return cSolidusKeyword_0; }

		//SingleStep
		public RuleCall getSingleStepParserRuleCall_1() { return cSingleStepParserRuleCall_1; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Import:
		//	"@import" STRING;
		public ParserRule getRule() { return rule; }

		//"@import" STRING
		public Group getGroup() { return cGroup; }

		//"@import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	
	
	private final RuleSetElements pRuleSet;
	private final ContextElements pContext;
	private final SelectorElements pSelector;
	private final SumElements pSum;
	private final ProductElements pProduct;
	private final TermElements pTerm;
	private final StepElements pStep;
	private final RuleElements pRule;
	private final NestedElements pNested;
	private final PropertyElements pProperty;
	private final TerminalRule tHEXINT;
	private final ValueElements pValue;
	private final ConstraintElements pConstraint;
	private final SingleStepElements pSingleStep;
	private final ValsElements pVals;
	private final StepSuffixElements pStepSuffix;
	private final ImportElements pImport;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CcsEclipseGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRuleSet = new RuleSetElements();
		this.pContext = new ContextElements();
		this.pSelector = new SelectorElements();
		this.pSum = new SumElements();
		this.pProduct = new ProductElements();
		this.pTerm = new TermElements();
		this.pStep = new StepElements();
		this.pRule = new RuleElements();
		this.pNested = new NestedElements();
		this.pProperty = new PropertyElements();
		this.tHEXINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEXINT");
		this.pValue = new ValueElements();
		this.pConstraint = new ConstraintElements();
		this.pSingleStep = new SingleStepElements();
		this.pVals = new ValsElements();
		this.pStepSuffix = new StepSuffixElements();
		this.pImport = new ImportElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("net.immute.ccs.CcsEclipse".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RuleSet:
	//	context=Context? rules+=Rule*;
	public RuleSetElements getRuleSetAccess() {
		return pRuleSet;
	}
	
	public ParserRule getRuleSetRule() {
		return getRuleSetAccess().getRule();
	}

	//Context:
	//	"@context" "(" Selector ")" ";"?;
	public ContextElements getContextAccess() {
		return pContext;
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}

	//Selector:
	//	Sum (">" Sum)*;
	public SelectorElements getSelectorAccess() {
		return pSelector;
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}

	//Sum:
	//	Product ("," Product)*;
	public SumElements getSumAccess() {
		return pSum;
	}
	
	public ParserRule getSumRule() {
		return getSumAccess().getRule();
	}

	//Product:
	//	Term+;
	public ProductElements getProductAccess() {
		return pProduct;
	}
	
	public ParserRule getProductRule() {
		return getProductAccess().getRule();
	}

	//Term:
	//	Step (">" Step)*;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//Step: // | '(' Sum ')'
	//	SingleStep;
	public StepElements getStepAccess() {
		return pStep;
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}

	//Rule:
	//	Import | Constraint | Property | Nested;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//Nested:
	//	Selector (":" (Import | Constraint | Property) | "{" Rule* "}");
	public NestedElements getNestedAccess() {
		return pNested;
	}
	
	public ParserRule getNestedRule() {
		return getNestedAccess().getRule();
	}

	//Property:
	//	ID "=" Value;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//terminal HEXINT returns ecore::EInt:
	//	"0x" ("0".."9" | "a".."f" | "A".."F")+;
	public TerminalRule getHEXINTRule() {
		return tHEXINT;
	} 

	//Value:
	//	HEXINT | INT | "true" | "false";
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//Constraint:
	//	"@constrain" SingleStep;
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}

	//SingleStep:
	//	ID Vals? StepSuffix?;
	public SingleStepElements getSingleStepAccess() {
		return pSingleStep;
	}
	
	public ParserRule getSingleStepRule() {
		return getSingleStepAccess().getRule();
	}

	//Vals:
	//	"." ID Vals*;
	public ValsElements getValsAccess() {
		return pVals;
	}
	
	public ParserRule getValsRule() {
		return getValsAccess().getRule();
	}

	//StepSuffix:
	//	"/" SingleStep;
	public StepSuffixElements getStepSuffixAccess() {
		return pStepSuffix;
	}
	
	public ParserRule getStepSuffixRule() {
		return getStepSuffixAccess().getRule();
	}

	//Import:
	//	"@import" STRING;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
